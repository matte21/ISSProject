/* Generated by AN DISI Unibo */ 
package it.unibo.client;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
import it.unibo.baseEnv.basicFrame.EnvFrame;
import alice.tuprolog.SolveInfo;
import it.unibo.is.interfaces.IActivity;
import it.unibo.is.interfaces.IIntent;
public abstract class AbstractClient extends QActor implements IActivity{ 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			EnvFrame env = new EnvFrame( "Env_client", java.awt.Color.yellow  , java.awt.Color.black );
			env.init();
			env.setSize(800,400);
			IOutputEnvView newOutEnvView = ((EnvFrame) env).getOutputEnvView();
			return newOutEnvView;
		}
		public AbstractClient(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/client/WorldTheory.pl",
			setTheEnv( outEnvView )  , "transmission");		
			addInputPanel(80);
			addCmdPanels();	
			this.planFilePath = "./srcMore/it/unibo/client/plans.txt";
	  	}
	protected void addInputPanel(int size){
		((EnvFrame) env).addInputPanel(size);			
	}
	protected void addCmdPanels(){
		((EnvFrame) env).addCmdPanel("input", new String[]{"INPUT"}, this);
		((EnvFrame) env).addCmdPanel("alarm", new String[]{"FIRE"}, this);
		((EnvFrame) env).addCmdPanel("help",  new String[]{"HELP"}, this);				
	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "transmission" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("transmission",transmission);
	    	stateTab.put("wait_result",wait_result);
	    	stateTab.put("collect_result",collect_result);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "client tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun transmission = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("transmission",-1);
	    	String myselfName = "transmission";  
	    	temporaryStr = "\"Client about to submit job\"";
	    	println( temporaryStr );  
	    	parg = "submitJob(\"./srcJS/customJobs/getTemperature.js\")";
	    	actorOpExecute(parg, false);	//OCT17		 
	    	temporaryStr = "\"Client submitted job\"";
	    	println( temporaryStr );  
	    	//switchTo wait_result
	        switchToPlanAsNextState(pr, myselfName, "client_"+myselfName, 
	              "wait_result",false, false, null); 
	    }catch(Exception e_transmission){  
	    	 println( getName() + " plan=transmission WARNING:" + e_transmission.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//transmission
	    
	    StateFun wait_result = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("wait_result",-1);
	    	String myselfName = "wait_result";  
	    	temporaryStr = "\"Client waiting for result\"";
	    	println( temporaryStr );  
	    	//bbb
	    msgTransition( pr,myselfName,"client_"+myselfName,false,
	          new StateFun[]{stateTab.get("collect_result") },
	          new String[]{"true","M","result" },
	          20000, "collect_result" );
	    }catch(Exception e_wait_result){  
	    	 println( getName() + " plan=wait_result WARNING:" + e_wait_result.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//wait_result
	    
	    StateFun collect_result = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("collect_result",-1);
	    	String myselfName = "collect_result";  
	    	printCurrentMessage(false);
	    	repeatPlanNoTransition(pr,myselfName,"client_"+myselfName,false,false);
	    }catch(Exception e_collect_result){  
	    	 println( getName() + " plan=collect_result WARNING:" + e_collect_result.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//collect_result
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
		/* 
		* ------------------------------------------------------------
		* IACTIVITY (aactor with GUI)
		* ------------------------------------------------------------
		*/
		private String[] actions = new String[]{
		    	"println( STRING | TERM )", 
		    	"play('./audio/music_interlude20.wav'),20000,'alarm,obstacle', 'handleAlarm,handleObstacle'",
		"emit(EVID,EVCONTENT)  ",
		"move(MOVE,DURATION,ANGLE)  with MOVE=mf|mb|ml|mr|ms",
		"forward( DEST, MSGID, MSGCONTENTTERM)"
		    };
		    protected void doHelp(){
				println("  GOAL ");
				println("[ GUARD ], ACTION  ");
				println("[ GUARD ], ACTION, DURATION ");
				println("[ GUARD ], ACTION, DURATION, ENDEVENT");
				println("[ GUARD ], ACTION, DURATION, EVENTS, PLANS");
				println("Actions:");
				for( int i=0; i<actions.length; i++){
					println(" " + actions[i] );
				}
		    }
		@Override
		public void execAction(String cmd) {
			if( cmd.equals("HELP") ){
				doHelp();
				return;
			}
			if( cmd.equals("FIRE") ){
				emit("alarm", "alarm(fire)");
				return;
			}
			String input = env.readln();
			//input = "\""+input+"\"";
			input = it.unibo.qactors.web.GuiUiKb.buildCorrectPrologString(input);
			//println("input=" + input);
			try {
				Term.createTerm(input);
	 			String eventMsg=it.unibo.qactors.web.QActorHttpServer.inputToEventMsg(input);
				//println("QActor eventMsg " + eventMsg);
				emit("local_"+it.unibo.qactors.web.GuiUiKb.inputCmd, eventMsg);
	  		} catch (Exception e) {
		 		println("QActor input error " + e.getMessage());
			}
		}
	 	
		@Override
		public void execAction() {}
		@Override
		public void execAction(IIntent input) {}
		@Override
		public String execActionWithAnswer(String cmd) {return null;}
	}
